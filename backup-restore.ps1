# Keycloak Backup Script - Windows PowerShell verzi√≥

$BackupDir = "./keycloak-backup"
$Timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$RealmName = "biometric-2fa"
$KeycloakUrl = "https://localhost:8443"

Write-Host "üîÑ Keycloak Backup Script" -ForegroundColor Cyan
Write-Host "=========================" -ForegroundColor Cyan
Write-Host ""

# Backup k√∂nyvt√°r l√©trehoz√°sa
if (-not (Test-Path $BackupDir)) {
    New-Item -ItemType Directory -Path $BackupDir | Out-Null
}

# 1. Admin token megszerz√©se
Write-Host "1Ô∏è‚É£  Admin token megszerz√©se..." -ForegroundColor Yellow

$Body = @{
    username = "admin"
    password = "admin123"
    grant_type = "password"
    client_id = "admin-cli"
}

try {
    $TokenResponse = Invoke-RestMethod -Uri "$KeycloakUrl/realms/master/protocol/openid-connect/token" `
        -Method Post `
        -Body $Body `
        -ContentType "application/x-www-form-urlencoded" `
        -SkipCertificateCheck

    $Token = $TokenResponse.access_token
    Write-Host "‚úì Admin token megszerzve" -ForegroundColor Green
}
catch {
    Write-Host "‚úó Admin token megszerz√©se sikertelen" -ForegroundColor Red
    Write-Host $_.Exception.Message
    exit 1
}

# 2. Realm export√°l√°sa
Write-Host ""
Write-Host "2Ô∏è‚É£  Realm export√°l√°sa..." -ForegroundColor Yellow

$ExportFile = "$BackupDir\$RealmName-backup-$Timestamp.json"

$Headers = @{
    Authorization = "Bearer $Token"
    Accept = "application/json"
}

try {
    $RealmData = Invoke-RestMethod -Uri "$KeycloakUrl/admin/realms/$RealmName/partial-export?exportClients=true&exportGroupsAndRoles=true" `
        -Method Post `
        -Headers $Headers `
        -SkipCertificateCheck

    $RealmData | ConvertTo-Json -Depth 100 | Out-File -FilePath $ExportFile -Encoding UTF8

    $FileSize = (Get-Item $ExportFile).Length / 1KB
    Write-Host "‚úì Realm export√°lva: $ExportFile" -ForegroundColor Green
    Write-Host "   F√°jl m√©ret: $([math]::Round($FileSize, 2)) KB" -ForegroundColor Gray
}
catch {
    Write-Host "‚úó Realm export sikertelen" -ForegroundColor Red
    Write-Host $_.Exception.Message
    exit 1
}

# 3. Docker Compose backup
Write-Host ""
Write-Host "3Ô∏è‚É£  Docker Compose konfigur√°ci√≥ ment√©se..." -ForegroundColor Yellow

if (Test-Path "docker-compose.yaml") {
    Copy-Item "docker-compose.yaml" "$BackupDir\docker-compose-backup-$Timestamp.yaml"
    Write-Host "‚úì Docker Compose mentve" -ForegroundColor Green
}

# 4. Angular konfigur√°ci√≥ backup
Write-Host ""
Write-Host "4Ô∏è‚É£  Angular app konfigur√°ci√≥ ment√©se..." -ForegroundColor Yellow

if (Test-Path "angular-app/src/app/app.config.ts") {
    $AngularConfigDir = "$BackupDir\angular-config"
    if (-not (Test-Path $AngularConfigDir)) {
        New-Item -ItemType Directory -Path $AngularConfigDir | Out-Null
    }

    Copy-Item "angular-app/src/app/app.config.ts" "$AngularConfigDir\app.config-backup-$Timestamp.ts"
    Write-Host "‚úì Angular config mentve" -ForegroundColor Green
}

# 5. Dokument√°ci√≥k backup
Write-Host ""
Write-Host "5Ô∏è‚É£  Dokument√°ci√≥k √∂sszegy≈±jt√©se..." -ForegroundColor Yellow

$DocsBackupDir = "$BackupDir\docs-backup-$Timestamp"
New-Item -ItemType Directory -Path $DocsBackupDir | Out-Null

$DocFiles = Get-ChildItem -Path "." -Filter "*.md"
foreach ($Doc in $DocFiles) {
    Copy-Item $Doc.FullName "$DocsBackupDir\"
}

Write-Host "‚úì $($DocFiles.Count) dokumentum mentve" -ForegroundColor Green

# 6. PostgreSQL dump (opcion√°lis)
Write-Host ""
Write-Host "6Ô∏è‚É£  PostgreSQL adatb√°zis dump..." -ForegroundColor Yellow

try {
    docker exec keycloak-postgres pg_dump -U keycloak keycloak > "$BackupDir\postgres-dump-$Timestamp.sql" 2>$null

    if (Test-Path "$BackupDir\postgres-dump-$Timestamp.sql") {
        $DbSize = (Get-Item "$BackupDir\postgres-dump-$Timestamp.sql").Length / 1KB
        Write-Host "‚úì PostgreSQL dump mentve" -ForegroundColor Green
        Write-Host "   F√°jl m√©ret: $([math]::Round($DbSize, 2)) KB" -ForegroundColor Gray
    }
}
catch {
    Write-Host "‚ö† PostgreSQL dump kihagyva (opcion√°lis)" -ForegroundColor Yellow
}

# 7. Backup √∂sszegz√©s
Write-Host ""
Write-Host "7Ô∏è‚É£  Backup √∂sszegz√©s k√©sz√≠t√©se..." -ForegroundColor Yellow

$BackupInfo = @"
Keycloak Backup Inform√°ci√≥k
===========================

Backup id≈ëpontja: $(Get-Date)
Realm neve: $RealmName

Mentett f√°jlok:
--------------
1. Realm export: $RealmName-backup-$Timestamp.json
2. Docker Compose: docker-compose-backup-$Timestamp.yaml
3. Angular config: angular-config/app.config-backup-$Timestamp.ts
4. Dokument√°ci√≥k: docs-backup-$Timestamp/
5. PostgreSQL dump: postgres-dump-$Timestamp.sql (opcion√°lis)

Realm be√°ll√≠t√°sok:
-----------------
- WebAuthn Policy: cross-platform (telefonos QR k√≥dos)
- User Verification: required (biometrikus k√∂telez≈ë)
- Test felhaszn√°l√≥: testuser / Test123
- Admin: admin / admin123

Restore parancs (PowerShell):
----------------------------
.\restore.ps1 $RealmName-backup-$Timestamp.json

Vagy manu√°lisan:
1. Keycloak Admin Console ‚Üí Realm Settings ‚Üí Action ‚Üí Partial Import
2. T√∂ltsd fel: $RealmName-backup-$Timestamp.json
3. V√°laszd ki mit import√°lsz (Users, Clients, Roles, etc.)
4. Import

Docker √∫jraind√≠t√°s:
------------------
docker-compose down
docker-compose up -d

Dokument√°ci√≥ helye:
------------------
docs-backup-$Timestamp/
"@

$BackupInfo | Out-File "$BackupDir\BACKUP-INFO-$Timestamp.txt" -Encoding UTF8
Write-Host "‚úì Backup √∂sszegz√©s l√©trehozva" -ForegroundColor Green

# 8. √ñsszes√≠t√©s
Write-Host ""
Write-Host "============================================" -ForegroundColor Green
Write-Host "‚úÖ Backup sikeresen elk√©sz√ºlt!" -ForegroundColor Green
Write-Host "============================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìÅ Backup helye: $BackupDir"
Write-Host ""
Write-Host "Mentett f√°jlok:"
Get-ChildItem $BackupDir | Where-Object { $_.Name -like "*$Timestamp*" } | ForEach-Object {
    $Size = if ($_.PSIsContainer) { "-" } else { "$([math]::Round($_.Length / 1KB, 2)) KB" }
    Write-Host "   $($_.Name) ($Size)"
}
Write-Host ""
Write-Host "üí° Restore: .\restore.ps1 $RealmName-backup-$Timestamp.json"
Write-Host ""

# Teljes backup m√©ret
$TotalSize = (Get-ChildItem $BackupDir -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
Write-Host "üì¶ Teljes backup m√©ret: $([math]::Round($TotalSize, 2)) MB"
